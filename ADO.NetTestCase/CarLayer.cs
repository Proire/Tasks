using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace ADO.NetTestCase
{
    internal class CarLayer
    {
        private string connectionString = string.Empty;
        private SqlDataAdapter dataAdapter = null;
        private DataSet dataset = new();

        public CarLayer(IConfiguration configuration) 
        {
            connectionString = configuration.GetConnectionString("Default") ?? throw new Exception("No Connection string found");
            CreateCarsTable();
        }

        public SqlConnection GetConnection()
        {
            SqlConnection connection = new SqlConnection();
            connection.ConnectionString = connectionString;
            return connection;
        }

        public void CreateCarsTable()
        {

            // Create a DataTable for the Cars
            DataTable carTable = new("Cars");

            // Define the columns for the Cars table
            carTable.Columns.Add("Id", typeof(int));
            carTable.Columns.Add("Make", typeof(string));
            carTable.Columns.Add("Model", typeof(string));
            carTable.Columns.Add("Year", typeof(string));
            carTable.Columns.Add("Mileage", typeof(int));

            // Specify the first column "Id" as the primary key
            carTable.PrimaryKey = new DataColumn[] { carTable.Columns["Id"] };

            // Add the DataTable to the DataSet
            dataset.Tables.Add(carTable);

            // Create the SQL CREATE TABLE statement
            string createTableSql = "CREATE TABLE Cars(";

            // Iterate through the columns of the DataTable to build the column definitions
            foreach (DataColumn column in dataset.Tables["Cars"].Columns)
            {
                createTableSql += $"{column.ColumnName} {GetSqlType(column.DataType)}, ";
            }

            // Add PRIMARY KEY constraint for the first column
            createTableSql += "PRIMARY KEY (Id)"; 

            // Close the statement
            createTableSql += ")";

            // Get a SqlConnection
            using SqlConnection connection = GetConnection();
            {
                try
                {
                    // Open the connection
                    connection.Open();

                    // Create a SqlCommand to execute the SQL statement
                    using SqlCommand command = new(createTableSql, connection);

                    // Execute the SQL statement to create the table
                    command.ExecuteNonQuery();

                    Console.WriteLine("Table created successfully.");
                }
                catch (Exception)
                {
                    Console.WriteLine("Table already Exists");
                }
            } 
        }
        private static string GetSqlType(Type dataType)  // converts c# datatypes to sql datatypes
        {
            // Map .NET data types to SQL data types
            if (dataType == typeof(int))
            {
                return "INT";
            }
            else if (dataType == typeof(string))
            {
                return "VARCHAR(255)"; // Adjust the length as needed
            }

            // Default to VARCHAR(255) for unknown types
            return "VARCHAR(255)";
        }

        public void AddCar()
        {
            if (dataset.Tables["Cars"].Rows.Count != 0)
                DisplayCars();
            // Creating new row using datarow object and assigning values
            DataRow drCurrent = dataset.Tables["Cars"].NewRow();
            // Accept user input for each field
            Console.Write("Enter Id: ");
            drCurrent["Id"] = int.Parse(Console.ReadLine());

            Console.Write("Enter Make: ");
            drCurrent["Make"] = Console.ReadLine();

            Console.Write("Enter Model: ");
            drCurrent["Model"] = Console.ReadLine();

            Console.Write("Enter Year (YYYY-MM-DD): ");
            drCurrent["Year"] = Console.ReadLine();

            Console.Write("Enter Mileage: ");
            drCurrent["Mileage"] = int.Parse(Console.ReadLine());

            // Adding that row to datatable of dataset
            dataset.Tables["Cars"].Rows.Add(drCurrent);

            dataAdapter = new SqlDataAdapter("Select * from Cars",GetConnection());
            SqlCommandBuilder co = new(dataAdapter);
            dataAdapter.Update(dataset, "Cars");

            // Interesting to know the query generated by sqlcommandreader automatically
            //Console.WriteLine(co.GetInsertCommand().CommandText); 

        }

        public void UpdateCar()
        {
            DisplayCars();
            Console.WriteLine("\nEnter Id of the car to update: ");
            int id = int.Parse(Console.ReadLine());
            DataRow drCurrent = dataset.Tables["Cars"].Rows.Find(id) ?? throw new Exception("Car with that Id not present");

            bool exitLoop = false;

            while (!exitLoop)
            {
                Console.WriteLine("Select field to update:");
                Console.WriteLine("1. Id");
                Console.WriteLine("2. Make");
                Console.WriteLine("3. Model");
                Console.WriteLine("4. Year");
                Console.WriteLine("5. Mileage");
                Console.WriteLine("6. Exit\n");

                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        Console.Write("Enter new Id: ");
                        int newId = int.Parse(Console.ReadLine());
                        drCurrent["Id"] = newId;
                        break;

                    case "2":
                        Console.Write("Enter new Make: ");
                        string newMake = Console.ReadLine();
                        drCurrent["Make"] = newMake;
                        break;

                    case "3":
                        Console.Write("Enter new Model: ");
                        string newModel = Console.ReadLine();
                        drCurrent["Model"] = newModel;
                        break;

                    case "4":
                        Console.Write("Enter new Year (YYYY-MM-DD): ");
                        string newYear = Console.ReadLine();
                        drCurrent["Year"] = newYear;
                        break;

                    case "5":
                        Console.Write("Enter new Mileage: ");
                        int newMileage = int.Parse(Console.ReadLine());
                        drCurrent["Mileage"] = newMileage;
                        break;

                    case "6":
                        exitLoop = true;
                        break;

                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
                Console.WriteLine();
            }

            SqlCommandBuilder co = new(dataAdapter);
            dataAdapter.Update(dataset, "Cars");

            //Console.WriteLine(co.GetUpdateCommand().CommandText);

        }

        public void DeleteCar()
        {
            DisplayCars();
            Console.Write("Enter Id of the car to delete: ");
            int id = int.Parse(Console.ReadLine());
            DataRow dd = dataset.Tables["Cars"].Rows.Find(id);
            dd.Delete();

            SqlCommandBuilder co = new SqlCommandBuilder(dataAdapter);

            dataAdapter.Update(dataset, "Cars");

            //Console.WriteLine(co.GetDeleteCommand().CommandText);
        }

        public void DisplayCars()
        {
            Console.WriteLine();
            SqlConnection connection = GetConnection();
            dataset.Tables.Clear();
            dataAdapter.FillSchema(dataset, SchemaType.Source, "Cars");
            dataAdapter.Fill(dataset, "Cars");
            DataTable dt = dataset.Tables["Cars"];
            foreach (DataRow row in dt.Rows)
            {
                foreach (DataColumn col in dt.Columns)
                    Console.Write(row[col] + " ");
                Console.WriteLine();
            }
            Console.WriteLine();
        }
    }
}
